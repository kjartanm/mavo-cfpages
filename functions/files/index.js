const mime = {
    // Audio
    'audio/basic': [[0x2E, 0x73, 0x6E, 0x64], [0xFF, 0xFF, 0xFF, 0xFF]],
    'audio/aiff': [[0x46, 0x4F, 0x52, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x41, 0x49, 0x46, 0x46], [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]],
    'audio/mpeg': [[0x49, 0x44, 0x33], [0xFF, 0xFF, 0xFF]],
    'audio/mp4': [[0x00, 0x00, 0x00, 0x00, 0x66, 0x74, 0x79, 0x70, 0x4D, 0x34, 0x41, 0x20], [0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
    'application/ogg': [[0x4F, 0x67, 0x67, 0x53, 0x00], [0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
    'audio/midi': [[0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06], [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
    'video/avi': [[0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x41, 0x56, 0x49, 0x20], [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]],
    'audio/wave': [[0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45], [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]],

    // Image
    'image/x-icon': [[0x00, 0x00, 0x01, 0x00], [0xFF, 0xFF, 0xFF, 0xFF]],
    'image/bmp': [[0x42, 0x4D], [0xFF, 0xFF]],
    'image/gif': [[0x47, 0x49, 0x46, 0x38, 0x37, 0x61], [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
    'image/webp': [[0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50, 0x56, 0x50], [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
    'image/png': [[0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A], [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
    'image/jpeg': [[0xFF, 0xD8, 0xFF], [0xFF, 0xFF, 0xFF]],

    // Archive
    'application/x-gzip': [[0x1F, 0x8B, 0x08], [0xFF, 0xFF, 0xFF]],
    'application/zip': [[0x50, 0x4B, 0x03, 0x04], [0xFF, 0xFF, 0xFF, 0xFF]],
    'application/x-rar-compressed': [[0x52, 0x61, 0x72, 0x20, 0x1A, 0x07, 0x00], [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],

    // Documents
    'application/postscript': [[0x25, 0x21, 0x50, 0x53, 0x2D, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x2D], [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
    'application/pdf': [[0x25, 0x50, 0x44, 0x46, 0x2D], [0xFF, 0xFF, 0xFF, 0xFF, 0xFF]],
};

//Adapted from https://gitlab.com/blakef/mimesniff/
async function getMIMEType(uint8) {
    return new Promise((resolve, reject) => {
        for (const [label, [test, mask]] of Object.entries(mime)) {
            if (uint8.length < test.length) {
                continue;
            }
            let success = true;
            for (let i = 0; i < test.length; i++) {
                if ((uint8[i] & mask[i]) !== test[i]) {
                    success = false;
                    continue;
                }
            }
            if (success) {
                return resolve(label);
            }
        }
        return reject(UNKNOWN);
    });
}

export async function onRequestPost(context) {

    let buffer = await context.request.arrayBuffer();
    let mimeType = await getMIMEType(new Uint8Array(buffer));
    let path = context.request.headers.get("cfpages-r2-path");

    if(!path || mimeType.indexOf('image/') !== 0){
        return new Response(null, {status: 400})
    }

    await context.env.MAVO_FILES.put(path, buffer, {
        httpMetadata: context.request.headers,
    }).catch(err => {
        return new Response(err.message, {status: 500})
    });

    let result = {path: '/files/' + path}
    return new Response(JSON.stringify(result));
}